---
title: "ggplot2 quick reference"
---


[ggplot2](https://ggplot2.tidyverse.org/) is a declarative system for making graphics in R based on [The Grammar of Graphics](https://link.springer.com/book/10.1007/0-387-28695-0). This document contains plots made in ggplot2 and some information about theming in ggplot2 to use as reference. It is meant to help learn/renew skills and as a reference for some less standard plots (e.g. time series plots with feats/fable).

Posit upholds a [cheat sheet](https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf) for ggplot2, which shows most of its methods in a compact manner.

## Plot examples

```{r}
library(ggplot2)

# Data structure and manipulation libraries
library(dplyr)
library(tidyr)

# Library for combining ggplots 
library(patchwork)

```

### Scatter plots {#scatter}

You can separate data on `color`, `shape` and `size`. `alpha` can be used to make plots more readable when many data points are present. `position="jitter"` is useful in cases of discrete positions in data.

::: panel-tabset
#### Standard

```{r}
#| label: scatter-standard
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + 
  geom_point(size = 4) +
  xlab("Sepal length") +
  ylab("Sepal width")
```

#### Alpha

Using alpha basically turns the plot into a 2d kernel density estimate (with a circular uniform kernel), which can be useful where points are densely packed.

```{r fig.height=4, fig.width=8}
#| label: scatter-alpha
n <- 1000
R <- matrix(c(1, .5, 0, 0,
              .5, 1, 0, 0,
              0, 0, 1, -.5,
              0, 0, -.5, 1), 
            nrow = 4, ncol = 4, byrow = TRUE)

mu = c(X1=0, Y1=0, X2=-1, Y2=-1)
data = mvtnorm::rmvnorm(n, mean=mu, sigma=R )

df <- as_tibble(data) |> 
        pivot_longer(everything(),
                     names_to = c(".value", "distr"),
                     names_pattern = "(.)(.)")

p1 <- ggplot(df, aes(X, Y)) +
  geom_point() +
  ggtitle("Standard")

p2 <- ggplot(df, aes(X, Y)) +
  geom_point(alpha=0.1, size=3) +
  ggtitle("Alpha = 0.1")

p1 + p2
```

#### Jitter

Example taken from [ggplot2 reference](https://ggplot2.tidyverse.org/reference/geom_jitter.html). Shows the same data with and without jitter. Another option for categorical scatter plots is the [beeswarm plot](https://r-graph-gallery.com/beeswarm.html), which separates the points in a systematic way rather than random.

```{r fig.height=4, fig.width=8}
#| label: scatter-jitter
p1 <- ggplot(mpg, aes(cyl, hwy)) + 
  geom_point()

p2 <- ggplot(mpg, aes(cyl, hwy)) + 
  geom_point(position = "jitter")

 p1 + p2
```
:::

A pair-wise plot can quite easily be made with the library [GGally](https://ggobi.github.io/ggally/). The diagonal and the upper and lower triangle each have a default plot type for continuous, discrete and combo (discrete on one axis and continuous on the other). These can be changed in the method, see `ggpairs()` documentation for more information.

```{r}
#| label: scatter-pair
library(GGally)
ggpairs(iris, columns = 1:4, aes(color=Species, fill=Species),
        diag = list(continuous = wrap("densityDiag", alpha=0.6)))
```

### Bar plots {#bar}

Bar plots can be used either through `geom_bar()`, which counts the number of instances of each group of x or y, or through `geom_col()` which takes the height/length of the bars.

::: panel-tabset
#### geom_bar()

```{r}
#| label: bar1
iris |> 
  filter(Sepal.Length > 5) |> 
  
  ggplot(aes(x=Species, fill=Species)) +
  geom_bar() +
  ggtitle("Flowers with sepal length > 5cm")
```

#### geom_col()

```{r}
#| label: bar2
iris |> 
  group_by(Species) |> 
  summarise_all(mean) |> 
  pivot_longer(-Species, values_to = "Mean") |>
  
  ggplot(aes(x=name, y=Mean, fill=Species)) +
  geom_col(position = "dodge2") +
  xlab("")
```
:::

### Histograms {.tabset}

Default position is `"stack"`. Use position `"identity"` for overlapping histograms. Bins/binwidth is determined automatically for this example. Change bins with `bins = n` or `binwidth = c`.

::: panel-tabset
#### Stack

```{r}
#| label: hist-stack
ggplot(iris, aes(x=Sepal.Length, fill=Species)) +
  geom_histogram()

```

#### Identity

```{r}
#| label: hist-overlap
ggplot(iris, aes(x=Sepal.Length, fill=Species)) +
  geom_histogram(position="identity", alpha=0.5)

```
:::

### Box plots {#box}

Boxplots are straight forward to generate. Below you can see two examples. Interquartile range can be changed through `coef` which defaults to 1.5.

::: panel-tabset
#### Standard
```{r}
#| label: box-standard
ggplot(iris, aes(x=Sepal.Length, y=Species, fill=Species)) +
  geom_boxplot()
```

#### Grouped
Grouped example of box plots. Position defaults to `"dodge2"`.

```{r}
#| label: box-grouped
iris |>
  pivot_longer(cols = -Species) |>
  ggplot(aes(y=value, x=name, fill=Species)) +
  geom_boxplot() + 
  labs(y = "cm", x="")
```

:::

### Distribution plots

The `geom_density()` function takes data and runs a kernel density estimation. `kernel` can be set to one of `"gaussian"`, `"rectangular"`, `"triangular"`, `"epanechnikov"`, `"biweight"`, `"cosine"` or `"optocosine"` with `kernel = "gaussian"` as default. Defaults to `position=identity`, other options for this is `stack` which stacks the densities on top of each other and potentially `fill` (one should however be careful and fully aware of what is displayed when using the latter option).

::: panel-tabset
#### Identity

```{r}
#| label: kde-standard
ggplot(iris, aes(x=Sepal.Length, color=Species, fill = Species)) +
  geom_density(alpha=0.6) +
  xlim(bounds=c(4, 8.5))
```

#### Stack

```{r}
#| label: kde-stacked
ggplot(iris, aes(x=Sepal.Length, color=Species, fill = Species)) +
  geom_density(position="stack", alpha=0.8) +
  xlim(bounds=c(4, 8.5))
```

#### Faceted
For separated distribution plots we can use `facet_grid()`, which creates a grid according to given rules of data. Given data frame column names C1 and C2 the data can be faceted according to: `C1 ~ .` for rows, `. ~ C1` for columns and `C1 ~ C2` for a grid. `rows=vars(C1)` and `cols=vars(C2)` can be used instead.

```{r}
#| label: kde-faceted
ggplot(iris, aes(x=Sepal.Length, fill=Species, color=Species)) +
  geom_density(show.legend = F, alpha=0.8) + 
  facet_grid(Species ~ .) +
  xlim(c(4,8.5))
```

#### Flipped
Borrowed example from [The R Graph Gallery](https://r-graph-gallery.com/294-basic-ridgeline-plot.html#color) with axis flipped. In my opinion, this is a better option than the very similar violin plot when many distributions are to be shown in comparison to each other. Note that this uses the library [ggridges](https://github.com/wilkelab/ggridges) to create a "ridgeline plot" (faceted distribution plot with height able to overlap the above distribution). More information on these might be added later.

```{r fig.width=10, fig.height=5}
#| label: kde-ridge
library(ggridges)

ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = Month, fill = stat(x))) +
  geom_density_ridges_gradient(scale = 0.95, rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Temp. [F]", option = "C") +
  coord_flip()
```
:::


{{< include ./ggplot2_quick_ref/ggplot2_time_series.qmd >}}


{{< include ./ggplot2_quick_ref/ggplot2_maps.qmd >}}


## Interactive charts

{{< include ./ggplot2_quick_ref/ggplot2_plotly.qmd >}}



## Theme settings

ggplot2 comes with a couple of themes to choose from, which are displayed below (`theme_gray()`,`theme_minimal()`,`theme_bw()`,`theme_classic()`,`theme_dark()`,`theme_light()`). Custom themes can also be set up, see e.g. [Learning to create custom themes in ggplot](https://rpubs.com/mclaire19/ggplot2-custom-themes) for a tutorial. Custom themes might be added to this document at a later date.

```{r}
#| label: theme-defaults
p1 <- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + 
  geom_point(show.legend = F) +
  xlab("Sepal length") +
  ylab("Sepal width")

(p1 + theme_gray() + ggtitle("Gray")) +
(p1 + theme_minimal()+ ggtitle("Minimal")) +
(p1 + theme_bw()+ ggtitle("Black and white")) +
(p1 + theme_classic()+ ggtitle("Classic")) +
(p1 + theme_dark()+ ggtitle("Dark")) +
(p1 + theme_light()+ ggtitle("Light"))

```


{{< include ./ggplot2_quick_ref/ggplot2_palettes.qmd >}}


{{< include ./ggplot2_quick_ref/ggplot2_legends.qmd >}}


{{< include ./ggplot2_quick_ref/ggplot2_elements.qmd >}}



































