[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Untitled",
    "section": "",
    "text": "Test1\nthis is a test to test things"
  },
  {
    "objectID": "seaborn_quick_ref.html",
    "href": "seaborn_quick_ref.html",
    "title": "Seaborn quick reference",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_theme()\n\n\npenguins = sns.load_dataset('penguins')\ng = sns.scatterplot(penguins, x='bill_length_mm', y='flipper_length_mm', hue='species')\ng.set_xlabel('Bill length (mm)')\ng.set_ylabel('Flipper Length (mm)')\ng.legend_.set_title('Penguin species')\n\n\n\n\n\n\n\n\n\ng = sns.pairplot(penguins, hue='species')\n\n\n\n\n\n\n\n\n\n\n\ncountplot()barplot()\n\n\n\ng = sns.countplot(penguins, x='species', hue='species')\n\n\n\n\n\n\n\n\n\n\n\ng = sns.barplot(penguins, x='sex', y='bill_length_mm', hue='species')\nsns.move_legend(g, 'lower center', bbox_to_anchor=(0.5,1), ncol=3, frameon=False)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStackLayer\n\n\n\ng = sns.histplot(penguins, x='bill_length_mm', hue='species', multiple='stack')\n\n\n\n\n\n\n\n\n\n\n\ng = sns.histplot(penguins, x='bill_length_mm', hue='species')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLayerStackFill\n\n\n\ng = sns.kdeplot(penguins, x='bill_length_mm', hue='species', fill=True, alpha=0.6)\n\n\n\n\n\n\n\n\n\n\n\ng = sns.kdeplot(penguins, x='bill_length_mm', hue='species', fill=True, alpha=0.8, multiple='stack')\n\n\n\n\n\n\n\n\n\n\n\ng = sns.kdeplot(penguins, x='bill_length_mm', hue='species', fill=True, alpha=0.8, multiple='fill')\n\n\n\n\n\n\n\n\n\n\n\n\ndisplotFacetGrid\n\n\n\ng = sns.displot(penguins, kind='kde', row='species', x='bill_length_mm', hue='species', fill=True, alpha=0.8, height=2, aspect=4)\n\n\n\n\n\n\n\n\n\n\n\ng = sns.FacetGrid(penguins, row='species', hue='species', margin_titles=True, aspect=4, height=2)\ng.map_dataframe(sns.kdeplot, x=\"bill_length_mm\", fill=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ng = sns.boxplot(penguins, x='sex', y='bill_length_mm', hue='species')\nsns.move_legend(g, 'lower center', bbox_to_anchor=(0.5,1), ncol=3, frameon=False)"
  },
  {
    "objectID": "seaborn_quick_ref.html#bar-plot",
    "href": "seaborn_quick_ref.html#bar-plot",
    "title": "Seaborn quick reference",
    "section": "",
    "text": "countplot()barplot()\n\n\n\ng = sns.countplot(penguins, x='species', hue='species')\n\n\n\n\n\n\n\n\n\n\n\ng = sns.barplot(penguins, x='sex', y='bill_length_mm', hue='species')\nsns.move_legend(g, 'lower center', bbox_to_anchor=(0.5,1), ncol=3, frameon=False)"
  },
  {
    "objectID": "seaborn_quick_ref.html#histogram",
    "href": "seaborn_quick_ref.html#histogram",
    "title": "Seaborn quick reference",
    "section": "",
    "text": "StackLayer\n\n\n\ng = sns.histplot(penguins, x='bill_length_mm', hue='species', multiple='stack')\n\n\n\n\n\n\n\n\n\n\n\ng = sns.histplot(penguins, x='bill_length_mm', hue='species')"
  },
  {
    "objectID": "seaborn_quick_ref.html#distribution-plot",
    "href": "seaborn_quick_ref.html#distribution-plot",
    "title": "Seaborn quick reference",
    "section": "",
    "text": "LayerStackFill\n\n\n\ng = sns.kdeplot(penguins, x='bill_length_mm', hue='species', fill=True, alpha=0.6)\n\n\n\n\n\n\n\n\n\n\n\ng = sns.kdeplot(penguins, x='bill_length_mm', hue='species', fill=True, alpha=0.8, multiple='stack')\n\n\n\n\n\n\n\n\n\n\n\ng = sns.kdeplot(penguins, x='bill_length_mm', hue='species', fill=True, alpha=0.8, multiple='fill')\n\n\n\n\n\n\n\n\n\n\n\n\ndisplotFacetGrid\n\n\n\ng = sns.displot(penguins, kind='kde', row='species', x='bill_length_mm', hue='species', fill=True, alpha=0.8, height=2, aspect=4)\n\n\n\n\n\n\n\n\n\n\n\ng = sns.FacetGrid(penguins, row='species', hue='species', margin_titles=True, aspect=4, height=2)\ng.map_dataframe(sns.kdeplot, x=\"bill_length_mm\", fill=True)"
  },
  {
    "objectID": "seaborn_quick_ref.html#box-plot",
    "href": "seaborn_quick_ref.html#box-plot",
    "title": "Seaborn quick reference",
    "section": "",
    "text": "g = sns.boxplot(penguins, x='sex', y='bill_length_mm', hue='species')\nsns.move_legend(g, 'lower center', bbox_to_anchor=(0.5,1), ncol=3, frameon=False)"
  },
  {
    "objectID": "ggplot2_quick_ref.html#plots",
    "href": "ggplot2_quick_ref.html#plots",
    "title": "ggplot2 quick reference",
    "section": "Plots",
    "text": "Plots\nThis document contains plots made in ggplot2 and some information about theming in ggplot2 to use as reference. It is meant mainly to help renew rusty skills, but also as a reference for some less standard plots (eg. time series plots with feats/fable).\nPosit upholds a cheat sheet for ggplot2, which shows most methods of ggplot2 in a compact manner.\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Library for combining ggplots \nlibrary(patchwork)\n\n\nScatter plots\nYou can separate data on color, shape and size. position=\"jitter\" and alpha can be used to make plots more readable when many data points are present.\n\nggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + \n  geom_point(size = 4) +\n  xlab(\"Sepal length\") +\n  ylab(\"Sepal width\")\n\n\n\n\n\n\n\n\nA pair-wise plot can quite easily be made with the library GGally. The diagonal and the upper and lower triangle each have a default plot type for continuous, discrete and combo (discrete on one axis and continuous on the other). These can be changed in the method, see ggpairs() documentation for more information.\n\nlibrary(GGally)\nggpairs(iris, columns = 1:4, aes(color=Species, fill=Species),\n        diag = list(continuous = wrap(\"densityDiag\", alpha=0.6)))\n\n\n\n\n\n\n\n\n\n\nBar plots\nBar plots can be used either through geom_bar(), which counts the number of instances of each group of x or y, or through geom_col() which takes the height/length of the bars.\n\ngeom_bar()geom_col()\n\n\n\niris %&gt;% \n  filter(Sepal.Length &gt; 5) %&gt;% \n  \n  ggplot(aes(x=Species, fill=Species)) +\n  geom_bar() +\n  ggtitle(\"Flowers with sepal length &gt; 5cm\")\n\n\n\n\n\n\n\n\n\n\n\niris %&gt;% \n  group_by(Species) %&gt;% \n  summarise_all(mean) %&gt;% \n  pivot_longer(-Species, values_to = \"Mean\") %&gt;%\n  \n  ggplot(aes(x=name, y=Mean, fill=Species)) +\n  geom_col(position = \"dodge2\") +\n  xlab(\"\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nHistograms\nDefault position is \"stack\". Use position \"identity\" for overlapping histograms. Bins/binwidth is determined automatically for this example. Change bins with bins = n or binwidth = c.\n\nStackIdentity\n\n\n\nggplot(iris, aes(x=Sepal.Length, fill=Species)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\n\n\n\nggplot(iris, aes(x=Sepal.Length, fill=Species)) +\n  geom_histogram(position=\"identity\", alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\nBox plots\nBoxplots are straight forward to generate. Below you can see two examples. Interquartile range can be changed through coef which defaults to 1.5.\n\nggplot(iris, aes(x=Sepal.Length, y=Species, fill=Species)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nGrouped example of box plots. Position defaults to \"dodge2\".\n\niris %&gt;%\n  pivot_longer(cols = -Species) %&gt;%\n  ggplot(aes(y=value, x=name, fill=Species)) +\n  geom_boxplot() + \n  labs(y = \"cm\", x=\"\")\n\n\n\n\n\n\n\n\n\n\nDistributions\nThe geom_density() function takes data and runs a kernel density estimation. kernel can be set to one of \"gaussian\", \"rectangular\", \"triangular\", \"epanechnikov\", \"biweight\", \"cosine\" or \"optocosine\" with kernel = \"gaussian\" as default. … defaults to position=identity, other options for this is stack which stacks the densities on top of each other and potentially fill (one should however be careful and fully aware of what is displayed when using the latter option).\n\nIdentityStack\n\n\n\nggplot(iris, aes(x=Sepal.Length, color=Species, fill = Species)) +\n  geom_density(alpha=0.6) +\n  xlim(bounds=c(4, 8.5))\n\n\n\n\n\n\n\n\n\n\n\nggplot(iris, aes(x=Sepal.Length, color=Species, fill = Species)) +\n  geom_density(position=\"stack\", alpha=0.8) +\n  xlim(bounds=c(4, 8.5))\n\n\n\n\n\n\n\n\n\n\n\nFor separated distribution plots we can use facet_grid(), which creates a grid according to given rules of data. Given data frame column names C1 and C2 the data can be faceted according to: C1 ~ . for rows, . ~ C1 for columns and C1 ~ C2 for a grid. rows=vars(C1) and cols=vars(C2) can be used instead.\n\nggplot(iris, aes(x=Sepal.Length, fill=Species, color=Species)) +\n  geom_density(show.legend = F, alpha=0.8) + \n  facet_grid(Species ~ .) +\n  xlim(c(4,8.5))\n\n\n\n\n\n\n\n\nBorrowed example from The R Graph Gallery with axis flipped. In my opinion, this is a better option than the very similar violin plot when many distributions are to be shown in comparison to each other. Note that this uses the library ggridges to create a “ridgeline plot” (faceted distribution plot with height able to overlap the above distribution). More information on these might be added later.\n\nlibrary(ggridges)\n\nggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = Month, fill = stat(x))) +\n  geom_density_ridges_gradient(scale = 0.95, rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\", option = \"C\") +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\nTime series\nUsing the tsibble and feasts libraries, many plots related to time series analysis can easily be created. Below is an example of a plot of a time series.\n\n# Time series libraries\nlibrary(tsibble)\nlibrary(feasts)\n\nair_pas &lt;-  as_tsibble(AirPassengers)\n\nair_pas %&gt;% \n  autoplot() + \n  ylab(\"Air passengers (in thousands)\") + \n  xlab(\"\") +  \n  ggtitle(\"Monthly international air passengers 1949-1960\")\n\n\n\n\n\n\n\n\nTwo useful plots for inspecting seasonal changes can be seen below.\n\np_seas &lt;- gg_season(air_pas, labels = \"right\", labels_repel = TRUE)\np_sub &lt;- gg_subseries(air_pas)\n\np_seas / p_sub #plots combined through patchwork (library) \n\n\n\n\n\n\n\n\nA plot of a time series decomposition can also be displayed as follows. Here STL is used. The trend and seasonal windows are determined automatically for this example.\n\nair_pas.stl &lt;- air_pas %&gt;%\n  mutate(value = log(value)) %&gt;% # Log series since seasonality seems multiplicative with trend\n  model(\n    STL(value ~ trend() + season())) # The windows for trend and seasonality are automatically determined for this example\n  \nair_pas.stl %&gt;%\n  components() %&gt;%\n  autoplot() + labs(title = \"STL decomposition of log(AirPassengers)\")\n\n\n\n\n\n\n\n\nA plot for autocorrelation and partial autocorrelation can easily be made from a series. Note that the remainder seems to show some heteroscedasticity and as a result probably isn’t stationary.\n\nair_pas.stl %&gt;%\n  components() %&gt;%\n  gg_tsdisplay(y = remainder, plot_type = 'partial')\n\n\n\n\n\n\n\n\nForecasts with accompanying confidence intervals can be displayed and estimated with the library fable. Set level to change the confidence intervals, with NULL for no intervals or a list of numbers representing the percentages. Defaults to levels=c(80,95).\n\nlibrary(fable)\nts &lt;- tsibbledata::aus_production %&gt;% \n  select(Electricity) \n\nfit &lt;- ts %&gt;%\n  model( ARIMA(Electricity), ETS(Electricity))\n\nfit %&gt;% \n  forecast(h=\"5 years\") %&gt;% \n  autoplot(ts %&gt;% filter(Quarter &gt; yearquarter(\"1995 Q1\")), level=c(80, 95, 99)) + \n  facet_grid(.model ~ .)"
  },
  {
    "objectID": "ggplot2_quick_ref.html#interactive-charts",
    "href": "ggplot2_quick_ref.html#interactive-charts",
    "title": "ggplot2 quick reference",
    "section": "Interactive charts",
    "text": "Interactive charts\nPlots from ´ggplot2´ can be turned into interactive plots through the library plotly, usually with the ease of “plug and play”. Here are a few examples of some interactive charts using the method.\n\nScatter plotBox plotHistogram\n\n\n\nlibrary(plotly)\np &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species, size = Petal.Length )) + \n  geom_point() +\n  xlab(\"Sepal length\") +\n  ylab(\"Sepal width\")\n\nggplotly(p)\n\n\n\n\n\n\n\n\np &lt;- iris %&gt;%\n  pivot_longer(cols = -Species) %&gt;%\n  ggplot(aes(y=value, x=name, fill=Species)) +\n  geom_boxplot(position = position_dodge2(preserve = \"single\")) + \n  labs(y = \"cm\", x=\"\") \n\nggplotly(p) %&gt;% \n  layout(boxmode = \"group\")\n\n\n\n\n\n\n\n\np &lt;- ggplot(iris, aes(x=Sepal.Length, fill=Species)) +\n  geom_histogram()\n\nggplotly(p)"
  },
  {
    "objectID": "ggplot2_quick_ref.html#theme-settings",
    "href": "ggplot2_quick_ref.html#theme-settings",
    "title": "ggplot2 quick reference",
    "section": "Theme settings",
    "text": "Theme settings\nggplot2 comes with a couple of themes to choose from, which are displayed below (theme_gray(),theme_minimal(),theme_bw(),theme_classic(),theme_dark(),theme_light()). Custom themes can also be set up, see e.g. Learning to create custom themes in ggplot for a tutorial. Custom themes might be added to this document at a later date.\n\np1 &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + \n  geom_point(show.legend = F) +\n  xlab(\"Sepal length\") +\n  ylab(\"Sepal width\")\n\n(p1 + theme_gray() + ggtitle(\"Gray\")) +\n(p1 + theme_minimal()+ ggtitle(\"Minimal\")) +\n(p1 + theme_bw()+ ggtitle(\"Black and white\")) +\n(p1 + theme_classic()+ ggtitle(\"Classic\")) +\n(p1 + theme_dark()+ ggtitle(\"Dark\")) +\n(p1 + theme_light()+ ggtitle(\"Light\"))\n\n\n\n\n\n\n\n\n\nColors\nColor palettes can be defined through lists of either default colors supported in ggplot2 or through the colors RGB representation. They can also be named in cases where matches between specific groups and colors are desired.\n\nmy_palette1 &lt;- c('purple', 'orange', 'aquamarine3')\nmy_palette2 &lt;- c('virginica' = '#FF0000', 'setosa' = '#00FF00', 'versicolor' = '#0000FF') # Fully Red, Green, Blue in RGB notation\n\np1 &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + \n  geom_point() +\n  xlab(\"Sepal length\") +\n  ylab(\"Sepal width\") \n\n(p1 + scale_color_manual(values = my_palette1)) +\n  (p1 + scale_color_manual(values = my_palette2))\n\n\n\n\n\n\n\n\nHere are some examples of color palettes from the ColorBrewer set. These can easily be used with ggplot through the function scale_colour_brewer(palette = \"palette name\"). Further palettes can be acquired from the R package Paletteer which contains more than 2000 color palettes, including continuous palettes, and functions for simple use with ggplot.\n\nQualitativeSequentialDiverging\n\n\nThe qualitative colors of the Colorbrewer set are shown below. These are useful for distinguishing between different groups of data. For example, the different flower species in the iris data set.\n\nlibrary(RColorBrewer)\ndisplay.brewer.all(type='qual')\n\n\n\n\n\n\n\n\n\n\nBelow are the sequential colors of the Colorbrewer set, useful for ordered data visualizations such as heat maps.\n\ndisplay.brewer.all(type='seq')\n\n\n\n\n\n\n\n\n\n\nThe diverging colors diverge in two directions from a central color, emphasizing a mid-range value and/or the extremes. Useful for comparisons in relation to a chosen value/group or for loose groupings of ordered data.\n\ndisplay.brewer.all(type='div')"
  }
]