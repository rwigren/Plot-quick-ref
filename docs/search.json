[
  {
    "objectID": "seaborn_quick_ref.html",
    "href": "seaborn_quick_ref.html",
    "title": "Seaborn quick reference",
    "section": "",
    "text": "Seaborn is a high level library built on matplotlib which uses a declarative approach to create plots. Below are some plots and theming to be used as reference.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_theme() # Sets the default theme for seaborn\npenguins = sns.load_dataset('penguins') # Data set which will be used for most examples\n\n\n\nA simple scatter plot can made through code seen below. Hue='species' colors the points after species and groups the data, which is more relevant in other graphs. Labels are set here as an example, but are usually not set in following examples to reduce code clutter.\n\n# Plot\ng = sns.scatterplot(penguins, x='bill_length_mm', y='flipper_length_mm', hue='species')\n\n# Labels\ng.set_xlabel('Bill length (mm)')\ng.set_ylabel('Flipper Length (mm)')\ng.set_title('Flipper and bill length of penguins')\nplt.show()\n\n\n\n\n\n\n\n\nSeaborn has a default function for generatinog a pairplot. See PairGrid for a more customizable option.\n\nsns.pairplot(penguins, hue='species')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nSeaborn contains two types of barplots: countplot() which fittingly counts entries within categories to determine bar height and barplot() which uses an estimator to determine bar height. The default is estimator='mean', however, 'median', 'max', 'min' or a callable function (vector -&gt; scalar) can also be used. barplot() also supports error bars of 4 different types: 'sd' (standard deviation of data), 'pi' (percentile of data), 'se'(standard error of mean estimate) and 'ci' (bootstrap confidence intervals). More on these can be seen at (https://seaborn.pydata.org/tutorial/error_bars.html).\n\ncountplot()barplot()\n\n\n\ng = sns.countplot(penguins, x='species', hue='species')\n\n\n\n\n\n\n\n\n\n\n\ng = sns.barplot(penguins, x='sex', y='bill_length_mm', hue='species')\nsns.move_legend(g, 'lower center', bbox_to_anchor=(0.5,1), ncol=3, frameon=False)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefault position is 'layer'. Use position 'stack' for stacked histograms. Change bins with bins = n or binwidth = c. Bins/binwidth is determined automatically for this example.\n\nStackLayer\n\n\n\ng = sns.histplot(penguins, x='bill_length_mm', hue='species', multiple='stack')\n\n\n\n\n\n\n\n\n\n\n\ng = sns.histplot(penguins, x='bill_length_mm', hue='species')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe kdeplot() runs a kernel density estimation using a Gaussian kernel. Smoothing bandwidth can be changed with bw_method. Defalts to multiple='layer', but can also be set to 'stack' or 'fill'. (one should however be careful and fully aware of what is displayed when using the latter option)\n\nLayerStackFill\n\n\n\ng = sns.kdeplot(penguins, x='bill_length_mm', hue='species', fill=True, alpha=0.6)\n\n\n\n\n\n\n\n\n\n\n\ng = sns.kdeplot(penguins, x='bill_length_mm', hue='species', fill=True, alpha=0.8, multiple='stack')\n\n\n\n\n\n\n\n\n\n\n\ng = sns.kdeplot(penguins, x='bill_length_mm', hue='species', fill=True, alpha=0.8, multiple='fill')\n\n\n\n\n\n\n\n\n\n\n\nA faceted plot can be made in two different ways, with similar results. The highlevel functions, such as displot(), have faceting built into them. Simply set row=C1 and/or col=C2. FacetGrid() can be used in a similar manner, but is first defined as a grid and then mapped to a function.\n\ndisplotFacetGrid\n\n\n\ng = sns.displot(penguins, kind='kde', row='species', x='bill_length_mm', hue='species', fill=True, height=2, aspect=4)\n\n\n\n\n\n\n\n\n\n\n\ng = sns.FacetGrid(penguins, row='species', hue='species', margin_titles=True, height=2, aspect=4)\ng.map_dataframe(sns.kdeplot, x=\"bill_length_mm\", fill=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ng = sns.boxplot(penguins, x='sex', y='bill_length_mm', hue='species')\nsns.move_legend(g, 'lower center', bbox_to_anchor=(0.5,1), ncol=3, frameon=False)"
  },
  {
    "objectID": "seaborn_quick_ref.html#scatter-plot",
    "href": "seaborn_quick_ref.html#scatter-plot",
    "title": "Seaborn quick reference",
    "section": "",
    "text": "A simple scatter plot can made through code seen below. Hue='species' colors the points after species and groups the data, which is more relevant in other graphs. Labels are set here as an example, but are usually not set in following examples to reduce code clutter.\n\n# Plot\ng = sns.scatterplot(penguins, x='bill_length_mm', y='flipper_length_mm', hue='species')\n\n# Labels\ng.set_xlabel('Bill length (mm)')\ng.set_ylabel('Flipper Length (mm)')\ng.set_title('Flipper and bill length of penguins')\nplt.show()\n\n\n\n\n\n\n\n\nSeaborn has a default function for generatinog a pairplot. See PairGrid for a more customizable option.\n\nsns.pairplot(penguins, hue='species')\nplt.show()"
  },
  {
    "objectID": "seaborn_quick_ref.html#bar-plot",
    "href": "seaborn_quick_ref.html#bar-plot",
    "title": "Seaborn quick reference",
    "section": "",
    "text": "Seaborn contains two types of barplots: countplot() which fittingly counts entries within categories to determine bar height and barplot() which uses an estimator to determine bar height. The default is estimator='mean', however, 'median', 'max', 'min' or a callable function (vector -&gt; scalar) can also be used. barplot() also supports error bars of 4 different types: 'sd' (standard deviation of data), 'pi' (percentile of data), 'se'(standard error of mean estimate) and 'ci' (bootstrap confidence intervals). More on these can be seen at (https://seaborn.pydata.org/tutorial/error_bars.html).\n\ncountplot()barplot()\n\n\n\ng = sns.countplot(penguins, x='species', hue='species')\n\n\n\n\n\n\n\n\n\n\n\ng = sns.barplot(penguins, x='sex', y='bill_length_mm', hue='species')\nsns.move_legend(g, 'lower center', bbox_to_anchor=(0.5,1), ncol=3, frameon=False)"
  },
  {
    "objectID": "seaborn_quick_ref.html#histogram",
    "href": "seaborn_quick_ref.html#histogram",
    "title": "Seaborn quick reference",
    "section": "",
    "text": "Default position is 'layer'. Use position 'stack' for stacked histograms. Change bins with bins = n or binwidth = c. Bins/binwidth is determined automatically for this example.\n\nStackLayer\n\n\n\ng = sns.histplot(penguins, x='bill_length_mm', hue='species', multiple='stack')\n\n\n\n\n\n\n\n\n\n\n\ng = sns.histplot(penguins, x='bill_length_mm', hue='species')"
  },
  {
    "objectID": "seaborn_quick_ref.html#distribution-plot",
    "href": "seaborn_quick_ref.html#distribution-plot",
    "title": "Seaborn quick reference",
    "section": "",
    "text": "The kdeplot() runs a kernel density estimation using a Gaussian kernel. Smoothing bandwidth can be changed with bw_method. Defalts to multiple='layer', but can also be set to 'stack' or 'fill'. (one should however be careful and fully aware of what is displayed when using the latter option)\n\nLayerStackFill\n\n\n\ng = sns.kdeplot(penguins, x='bill_length_mm', hue='species', fill=True, alpha=0.6)\n\n\n\n\n\n\n\n\n\n\n\ng = sns.kdeplot(penguins, x='bill_length_mm', hue='species', fill=True, alpha=0.8, multiple='stack')\n\n\n\n\n\n\n\n\n\n\n\ng = sns.kdeplot(penguins, x='bill_length_mm', hue='species', fill=True, alpha=0.8, multiple='fill')\n\n\n\n\n\n\n\n\n\n\n\nA faceted plot can be made in two different ways, with similar results. The highlevel functions, such as displot(), have faceting built into them. Simply set row=C1 and/or col=C2. FacetGrid() can be used in a similar manner, but is first defined as a grid and then mapped to a function.\n\ndisplotFacetGrid\n\n\n\ng = sns.displot(penguins, kind='kde', row='species', x='bill_length_mm', hue='species', fill=True, height=2, aspect=4)\n\n\n\n\n\n\n\n\n\n\n\ng = sns.FacetGrid(penguins, row='species', hue='species', margin_titles=True, height=2, aspect=4)\ng.map_dataframe(sns.kdeplot, x=\"bill_length_mm\", fill=True)"
  },
  {
    "objectID": "seaborn_quick_ref.html#box-plot",
    "href": "seaborn_quick_ref.html#box-plot",
    "title": "Seaborn quick reference",
    "section": "",
    "text": "g = sns.boxplot(penguins, x='sex', y='bill_length_mm', hue='species')\nsns.move_legend(g, 'lower center', bbox_to_anchor=(0.5,1), ncol=3, frameon=False)"
  },
  {
    "objectID": "seaborn_quick_ref.html#palettes",
    "href": "seaborn_quick_ref.html#palettes",
    "title": "Seaborn quick reference",
    "section": "Palettes",
    "text": "Palettes\nPalettes can be set either in the plot function or in a with clause. By default, Seaborn supports matplotlib’s and ColorBrewer’s color palettes, however, own palettes can also be created.\nFor more information see e.g. color palette tutorial.\n\nfig, axes = plt.subplots(ncols=2)\nfig.set_figheight(4)\n\nwith sns.color_palette('Set2', 3):\n    sns.scatterplot(penguins, ax=axes[0], x='bill_length_mm', y='bill_depth_mm', hue='species', )\n\nsns.scatterplot(penguins, ax=axes[1], x='bill_length_mm', y='bill_depth_mm', hue='species', palette=sns.color_palette('Accent', 3))\nplt.show()\n\n\n\n\n\n\n\n\nCustom color palettes can be made with a sequence of colors in any format accepted by matplotlib. For example, hexadecimal RGB notation can be seen below.\n\nsns.color_palette([\"#D00000\", \"#00D000\", \"#0000D0\", \"#C0C000\", \"#00C0C0\", \"#C000C0\"])"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Plot quick reference",
    "section": "",
    "text": "Plot quick reference\nThis site is meant as a quick reference for some of the popular plotting frameworks in Python and R. The pages contain examples of useful plots and information about mechanics, themes, extensions and other. Navigate the top bar view frameworks.\nCurrently added framework: (still work in progress)"
  },
  {
    "objectID": "ggplot2_quick_ref.html",
    "href": "ggplot2_quick_ref.html",
    "title": "ggplot2 quick reference",
    "section": "",
    "text": "ggplot2 is a declarative system for making graphics in R based on The Grammar of Graphics. This document contains plots made in ggplot2 and some information about theming in ggplot2 to use as reference. It is meant to help learn/renew skills and as a reference for some less standard plots (e.g. time series plots with feats/fable).\nPosit upholds a cheat sheet for ggplot2, which shows most of its methods in a compact manner."
  },
  {
    "objectID": "ggplot2_quick_ref.html#plot-examples",
    "href": "ggplot2_quick_ref.html#plot-examples",
    "title": "ggplot2 quick reference",
    "section": "Plot examples",
    "text": "Plot examples\n\nlibrary(ggplot2)\n\n# Data structure and manipulation libraries\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Library for combining ggplots \nlibrary(patchwork)\n\n\nScatter plots\nYou can separate data on color, shape and size. alpha can be used to make plots more readable when many data points are present. position=\"jitter\" is useful in cases of discrete positions in data.\n\nStandardAlphaJitter\n\n\n\nggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + \n  geom_point(size = 4) +\n  xlab(\"Sepal length\") +\n  ylab(\"Sepal width\")\n\n\n\n\n\n\n\n\n\n\nUsing alpha basically turns the plot into a 2d kernel density estimate (with a circular uniform kernel), which can be useful where points are densely packed.\n\nn &lt;- 1000\nR &lt;- matrix(c(1, .5, 0, 0,\n              .5, 1, 0, 0,\n              0, 0, 1, -.5,\n              0, 0, -.5, 1), \n            nrow = 4, ncol = 4, byrow = TRUE)\n\nmu = c(X1=0, Y1=0, X2=-1, Y2=-1)\ndata = mvtnorm::rmvnorm(n, mean=mu, sigma=R )\n\ndf &lt;- as_tibble(data) |&gt; \n        pivot_longer(everything(),\n                     names_to = c(\".value\", \"distr\"),\n                     names_pattern = \"(.)(.)\")\n\np1 &lt;- ggplot(df, aes(X, Y)) +\n  geom_point() +\n  ggtitle(\"Standard\")\n\np2 &lt;- ggplot(df, aes(X, Y)) +\n  geom_point(alpha=0.1, size=3) +\n  ggtitle(\"Alpha = 0.1\")\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\nExample taken from ggplot2 reference. Shows the same data with and without jitter. Another option for categorical scatter plots is the beeswarm plot, which separates the points in a systematic way rather than random.\n\np1 &lt;- ggplot(mpg, aes(cyl, hwy)) + \n  geom_point()\n\np2 &lt;- ggplot(mpg, aes(cyl, hwy)) + \n  geom_point(position = \"jitter\")\n\n p1 + p2\n\n\n\n\n\n\n\n\n\n\n\nA pair-wise plot can quite easily be made with the library GGally. The diagonal and the upper and lower triangle each have a default plot type for continuous, discrete and combo (discrete on one axis and continuous on the other). These can be changed in the method, see ggpairs() documentation for more information.\n\nlibrary(GGally)\nggpairs(iris, columns = 1:4, aes(color=Species, fill=Species),\n        diag = list(continuous = wrap(\"densityDiag\", alpha=0.6)))\n\n\n\n\n\n\n\n\n\n\nBar plots\nBar plots can be used either through geom_bar(), which counts the number of instances of each group of x or y, or through geom_col() which takes the height/length of the bars.\n\ngeom_bar()geom_col()\n\n\n\niris |&gt; \n  filter(Sepal.Length &gt; 5) |&gt; \n  \n  ggplot(aes(x=Species, fill=Species)) +\n  geom_bar() +\n  ggtitle(\"Flowers with sepal length &gt; 5cm\")\n\n\n\n\n\n\n\n\n\n\n\niris |&gt; \n  group_by(Species) |&gt; \n  summarise_all(mean) |&gt; \n  pivot_longer(-Species, values_to = \"Mean\") |&gt;\n  \n  ggplot(aes(x=name, y=Mean, fill=Species)) +\n  geom_col(position = \"dodge2\") +\n  xlab(\"\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nHistograms\nDefault position is \"stack\". Use position \"identity\" for overlapping histograms. Bins/binwidth is determined automatically for this example. Change bins with bins = n or binwidth = c.\n\nStackIdentity\n\n\n\nggplot(iris, aes(x=Sepal.Length, fill=Species)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\n\n\n\nggplot(iris, aes(x=Sepal.Length, fill=Species)) +\n  geom_histogram(position=\"identity\", alpha=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\nBox plots\nBoxplots are straight forward to generate. Below you can see two examples. Interquartile range can be changed through coef which defaults to 1.5.\n\nStandardGrouped\n\n\n\nggplot(iris, aes(x=Sepal.Length, y=Species, fill=Species)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\nGrouped example of box plots. Position defaults to \"dodge2\".\n\niris |&gt;\n  pivot_longer(cols = -Species) |&gt;\n  ggplot(aes(y=value, x=name, fill=Species)) +\n  geom_boxplot() + \n  labs(y = \"cm\", x=\"\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nDistribution plots\nThe geom_density() function takes data and runs a kernel density estimation. kernel can be set to one of \"gaussian\", \"rectangular\", \"triangular\", \"epanechnikov\", \"biweight\", \"cosine\" or \"optocosine\" with kernel = \"gaussian\" as default. Defaults to position=identity, other options for this is stack which stacks the densities on top of each other and potentially fill (one should however be careful and fully aware of what is displayed when using the latter option).\n\nIdentityStackFacetedFlipped\n\n\n\nggplot(iris, aes(x=Sepal.Length, color=Species, fill = Species)) +\n  geom_density(alpha=0.6) +\n  xlim(bounds=c(4, 8.5))\n\n\n\n\n\n\n\n\n\n\n\nggplot(iris, aes(x=Sepal.Length, color=Species, fill = Species)) +\n  geom_density(position=\"stack\", alpha=0.8) +\n  xlim(bounds=c(4, 8.5))\n\n\n\n\n\n\n\n\n\n\nFor separated distribution plots we can use facet_grid(), which creates a grid according to given rules of data. Given data frame column names C1 and C2 the data can be faceted according to: C1 ~ . for rows, . ~ C1 for columns and C1 ~ C2 for a grid. rows=vars(C1) and cols=vars(C2) can be used instead.\n\nggplot(iris, aes(x=Sepal.Length, fill=Species, color=Species)) +\n  geom_density(show.legend = F, alpha=0.8) + \n  facet_grid(Species ~ .) +\n  xlim(c(4,8.5))\n\n\n\n\n\n\n\n\n\n\nBorrowed example from The R Graph Gallery with axis flipped. In my opinion, this is a better option than the very similar violin plot when many distributions are to be shown in comparison to each other. Note that this uses the library ggridges to create a “ridgeline plot” (faceted distribution plot with height able to overlap the above distribution). More information on these might be added later.\n\nlibrary(ggridges)\n\nggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = Month, fill = stat(x))) +\n  geom_density_ridges_gradient(scale = 0.95, rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\", option = \"C\") +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\n\n\nTime series\nUsing the tsibble and feasts libraries, many plots related to time series analysis can easily be created. Below is an example of a plot of a time series.\n\n# Time series libraries\nlibrary(tsibble)\nlibrary(feasts)\n\n\nStandardSeasonDecompositionResidualForecast\n\n\n\nair_pas &lt;-  as_tsibble(AirPassengers)\n\nair_pas |&gt; \n  autoplot() + \n  ylab(\"Air passengers (in thousands)\") + \n  xlab(\"\") +  \n  ggtitle(\"Monthly international air passengers 1949-1960\")\n\n\n\n\n\n\n\n\n\n\nTwo useful plots for inspecting seasonal changes can be seen below.\n\np_seas &lt;- gg_season(air_pas, labels = \"right\", labels_repel = TRUE)\np_sub &lt;- gg_subseries(air_pas)\n\np_seas / p_sub #plots combined through patchwork (library) \n\n\n\n\n\n\n\n\n\n\nA plot of a time series decomposition can also be displayed as follows. Here STL is used. The trend and seasonal windows are determined automatically for this example.\n\nair_pas.stl &lt;- air_pas |&gt;\n  mutate(value = log(value)) |&gt; # Log series since seasonality seems multiplicative with trend\n  model(\n    STL(value ~ trend() + season())) # The windows for trend and seasonality are automatically determined for this example\n  \nair_pas.stl |&gt;\n  components() |&gt;\n  autoplot() + labs(title = \"STL decomposition of log(AirPassengers)\")\n\n\n\n\n\n\n\n\n\n\nA plot for autocorrelation and partial autocorrelation can easily be made from a series. Note that the remainder seems to show some heteroscedasticity and as a result probably isn’t stationary.\n\nair_pas.stl |&gt;\n  components() |&gt;\n  gg_tsdisplay(y = remainder, plot_type = 'partial')\n\n\n\n\n\n\n\n\n\n\nForecasts with accompanying confidence intervals can be displayed and estimated with the library fable. Set level to change the confidence intervals, with NULL for no intervals or a list of numbers representing the percentages. Defaults to levels=c(80,95).\n\nlibrary(fable)\nts &lt;- tsibbledata::aus_production |&gt; \n  select(Electricity) \n\nfit &lt;- ts |&gt;\n  model( ARIMA(Electricity), ETS(Electricity))\n\nfit |&gt; \n  forecast(h=\"5 years\") |&gt; \n  autoplot(ts |&gt; filter(Quarter &gt; yearquarter(\"1995 Q1\")), level=c(80, 95, 99)) + \n  facet_grid(.model ~ .)\n\n\n\n\n\n\n\n\n\n\n\n\n\nMaps\nggplot2 makes it easy to plot maps with simple features data through geom_sf(). SF maps can be directly accessed through e.g.:\n\nrnaturalearth: R interface for the Natural earth dataset\nGiscoR: R interface/API for Eurostat GISCO\n\nOtherwise, the R package sf contains tools for working with of SF data and also converting some data types to SF (see https://r-spatial.github.io/sf/articles/sf2.html).\nIn these examples we will use rnaturalearth to obtain map data and join it with other data.\n\nAfricaEuropePoint mapsProjections\n\n\nContinents or countries can be obtained separately with rnaturalearth and, depending on the continent, used as is. Here the map data from Africa is obtained and joined with data from the gapminder data set.\nBoth data sets support the ISO 3166-1 alpha-3 naming standard and can as a result easily be combined.\n\nlibrary(rnaturalearth)\nlibrary(gapminder) # Data used in the example\nafr_map &lt;- ne_countries(continent = \"Africa\") |&gt; \n  select(iso_a3)\n\n\ngapm &lt;- gapminder |&gt; \n  filter(year==2007 & continent == \"Africa\") |&gt;\n  left_join(country_codes) |&gt; \n  select(iso_alpha, lifeExp)\n\n\nafr_map  |&gt; \n  left_join(gapm, by=join_by(iso_a3 == iso_alpha)) |&gt; \n  ggplot(aes(fill=lifeExp)) +\n  geom_sf() +\n  labs(title = \"Life expectancy 2007\", fill = \"Years\")\n\n\n\n\n\n\n\n\n\n\nGiven that some countries in Europe have overseas territory, e.g. Guadeloupe and the Falkland islands, a map of the continent might need coordinate adjustments. Here we adjust the longitude and latitude displayed through coord_sf() and do not filter out non-European landmasses.\n\nworld_map &lt;- ne_countries(scale = \"medium\") |&gt; \n  select(name) \neu_gdppc &lt;- read.csv(\"./data/eu_gdppc_proc.csv\") # Data from Eurostat\n\nworld_map |&gt;\n  left_join(eu_gdppc, by=join_by(name == geo)) |&gt;\n  filter(name != \"Denmark\") |&gt;\n\n    ggplot(aes(fill = X2024)) +\n    geom_sf() +\n    coord_sf(xlim=c(-25, 37), ylim=c(30, 70)) +\n    labs(fill = \"\", title = \"GDP per capita 2024\") +\n    scale_fill_distiller(palette = \"OrRd\", direction=1)\n\n\n\n\n\n\n\n\n\n\nFor point or bubble maps either geom_point() or geom_sf() can be used depending on the data used. Here the sf package is used to calculate centroids of the countries and geom_sf() to plot them. Points are also manually inserted and added to the plot to show geom_point() functionality. Note that these points represent latitude and longitude in the default projection.\n\n# Spherical geometry needs to be turned off for calculating centroids for this data set\nsf::sf_use_s2(FALSE) \nafr_map &lt;- ne_countries(continent = \"Africa\") |&gt; \n  select(iso_a3) |&gt; \n  mutate(centroid = sf::st_centroid(geometry))\nsf::sf_use_s2(TRUE)\n\ngapm &lt;- gapminder |&gt; \n  filter(year==2007 & continent == \"Africa\") |&gt;\n  left_join(country_codes) |&gt; \n  select(iso_alpha, lifeExp)\n\nmypoints &lt;- data.frame(x=c(50, 45, 44, 45, 46, 47, 48, 49, 50, 51), \n                       y=c(30, 30, 25, 24, 23.2, 23, 23, 23.2, 24, 25))\n\nafr_map  |&gt; \n  left_join(gapm, by=join_by(iso_a3 == iso_alpha)) |&gt; \n  ggplot() +\n  geom_sf() +\n  # Centroids are added to the plot\n  geom_sf(aes(geometry = centroid, color=lifeExp), alpha=0.8, size = 5) + \n  # Manual points are added to the plot\n  geom_point(data = mypoints, aes(x, y)) +\n  labs(title = \"Life expectancy 2007\", color=\"Years\", x=\"\", y=\"\")\n\n\n\n\n\n\n\n\n\n\nI do not currently possess the knowledge of the framework to go into depth, however, coordinate reference systems (CRS) of the map can be changed. Here is a very simple example using the EPSG:3035 CRS.\n\nworld_map &lt;- ne_countries() |&gt; \n  select(name)\n\nggplot(world_map) +\n  geom_sf() +\n  coord_sf(crs = sf::st_crs(\"epsg:3035\"))"
  },
  {
    "objectID": "ggplot2_quick_ref.html#interactive-charts",
    "href": "ggplot2_quick_ref.html#interactive-charts",
    "title": "ggplot2 quick reference",
    "section": "Interactive charts",
    "text": "Interactive charts\n\nPlotly\nPlots from ggplot2 can be turned into interactive plots through the library plotly, usually with the ease of “plug and play”. The resulting charts are equipped with a hover-over tooltip, panning, zooming and selections which can, for example, be used with shiny.\nHere are a few examples of some interactive charts using the method.\n\nScatter plotBox plotHistogram\n\n\nVariables not present in the chart can be added to the hover-over tooltip by adding them to the ggplot2 aesthetics with a chosen name. For example, label1, label2, etc.\n\nlibrary(plotly)\np &lt;- ggplot(iris, aes(color=Species, x=Sepal.Length, y=Sepal.Width, label1=Petal.Width, label2=Petal.Length)) + \n  geom_point() +\n  xlab(\"Sepal length\") +\n  ylab(\"Sepal width\")\n\nggplotly(p)\n\n\n\n\n\n\n\n\np &lt;- iris |&gt;\n  pivot_longer(cols = -Species) |&gt;\n  ggplot(aes(y=value, x=name, fill=Species)) +\n  geom_boxplot(position = position_dodge2(preserve = \"single\")) + \n  labs(y = \"cm\", x=\"\") \n\nggplotly(p) |&gt; \n  layout(boxmode = \"group\")\n\n\n\n\n\n\n\n\np &lt;- ggplot(iris, aes(x=Sepal.Length, fill=Species)) +\n  geom_histogram()\n\nggplotly(p)"
  },
  {
    "objectID": "ggplot2_quick_ref.html#theme-settings",
    "href": "ggplot2_quick_ref.html#theme-settings",
    "title": "ggplot2 quick reference",
    "section": "Theme settings",
    "text": "Theme settings\nggplot2 comes with a couple of themes to choose from, which are displayed below (theme_gray(),theme_minimal(),theme_bw(),theme_classic(),theme_dark(),theme_light()). Custom themes can also be set up, see e.g. Learning to create custom themes in ggplot for a tutorial. Custom themes might be added to this document at a later date.\n\np1 &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + \n  geom_point(show.legend = F) +\n  xlab(\"Sepal length\") +\n  ylab(\"Sepal width\")\n\n(p1 + theme_gray() + ggtitle(\"Gray\")) +\n(p1 + theme_minimal()+ ggtitle(\"Minimal\")) +\n(p1 + theme_bw()+ ggtitle(\"Black and white\")) +\n(p1 + theme_classic()+ ggtitle(\"Classic\")) +\n(p1 + theme_dark()+ ggtitle(\"Dark\")) +\n(p1 + theme_light()+ ggtitle(\"Light\"))\n\n\n\n\n\n\n\n\n\nColor palettes\nColor palettes can be defined through lists of either default colors supported in ggplot2 or through the colors RGB representation. They can also be named in cases where matches between specific groups and colors are desired.\n\nmy_palette1 &lt;- c('purple', 'orange', 'aquamarine3')\nmy_palette2 &lt;- c('virginica' = '#FF0000', 'setosa' = '#00FF00', 'versicolor' = '#0000FF') # Fully Red, Green, Blue in RGB notation\n\np1 &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + \n  geom_point() +\n  xlab(\"Sepal length\") +\n  ylab(\"Sepal width\") \n\n(p1 + scale_color_manual(values = my_palette1)) +\n  (p1 + scale_color_manual(values = my_palette2))\n\n\n\n\n\n\n\n\nHere are some examples of color palettes from the ColorBrewer set. These can easily be used with ggplot through the function scale_colour_brewer(palette = \"palette name\"). Further palettes can be acquired from the R package Paletteer which contains more than 2000 color palettes, including continuous palettes, and functions for simple use with ggplot.\n\nQualitativeSequentialDiverging\n\n\nThe qualitative colors of the Colorbrewer set are shown below. These are useful for distinguishing between different groups of data. For example, the different flower species in the iris data set.\n\nlibrary(RColorBrewer)\ndisplay.brewer.all(type='qual')\n\n\n\n\n\n\n\n\n\n\nBelow are the sequential colors of the Colorbrewer set, useful for ordered data visualizations such as heat maps.\n\ndisplay.brewer.all(type='seq')\n\n\n\n\n\n\n\n\n\n\nThe diverging colors diverge in two directions from a central color, emphasizing a mid-range value and/or the extremes. Useful for comparisons in relation to a chosen value/group or for loose groupings of ordered data.\n\ndisplay.brewer.all(type='div')\n\n\n\n\n\n\n\n\n\n\n\n\n\nLegends\nLegends in ggplot are very customizable in position and theme. Below are some examples and options reference for customization of legends. I would recommend to set many of these options on a theme basis rather than individual basis, however, here some are set on an individual basis to show more examples within a small space.\n\nPositionJustificationTextColors and spacing\n\n\n\nguide_legend() and guide_colorbar() are used in conjunction with guides() to specify aspects of legend guides (Legend reference, Colorbar reference). Here are some of the arguments:\n\nposition: Position of the legend relative to the chart. One of \"top\", \"right\", \"bottom\", \"left\" or \"inside\"\norder (integer): Order in which the guides are shown.\nncol/nrow: Sets number of columns or rows of legend items (only guide_legend)\ndirection: Direction of the legend (horizontal or vertical)\n\nlegend.position: Default position of the legends\n\n\np &lt;- mtcars |&gt; \n  ggplot(aes(x=mpg, y=wt, color=hp, shape=as.factor(gear), size=disp, fill = as.factor(cyl))) +\n  geom_point() +\n  guides(\n    color = guide_colorbar(position = \"top\", order = 1),\n    \n    shape = guide_legend(position = \"inside\", direction = \"horizontal\"),\n    \n    size = guide_legend(position = \"top\", ncol = 2, order = 2),\n    \n    fill = guide_legend(position = \"inside\")\n  ) + \n  scale_size_binned(range = c(1, 8), n.breaks = 8) +\n  theme(legend.position.inside = c(0.8, 0.8))\np\n\n\n\n\n\n\n\n\n\n\n\nlegend.position.inside: Legend placement when legend position is set to inside. (c(a, b), where \\(a,b \\in [0,1]\\)).\nlegend.justification: Justification of legends relative to plot. One of “left”, “right”, “top”, “bottom”, “center” or 2-dimensional vector (text or numeric). E.g. c(0, 1), c(\"left\", \"top\").\n\ncan be set individually for each legend position with: legend.justification.top, legend.justification.bottom, legend.justification.left, legend.justification.right, legend.justification.inside.\n\nlegend.box.just: Justification of legends within the bounding box.\nlegend.box: Arrangement of legends within the bounding box. \"horizontal\" or \"vertical\"\n\nLegend bounding box is set with a background and margin here to show its relation to the legends.\n\np  +\n  theme(legend.position.inside = NULL,\n        legend.justification = \"left\",\n        legend.justification.inside = c(\"right\",\"top\"),\n        \n        legend.box.background = element_rect(fill=\"gray\"),\n        legend.box.margin = unit(2, \"mm\"),\n        legend.box.just = c(\"center\", \"bottom\"),\n        legend.box = c(\"horizontal\", \"horizontal\", \"horizontal\", \"horizontal\", \"horizontal\")\n        )\n\n\n\n\n\n\n\n\n\n\n\nlegend.title.position: Legend title position relative to legend. Can be set to one of \"top\", \"bottom\", \"left\", \"right\"\nlegend.title: Options for legend title. Can be set with element_text() (see element_text).\nlegend.text: Options for the key-text. Can be set with element_text().\nlegend.text.position: The position of the text relative to the keys. One of \"top\", \"bottom\", \"left\", \"right\"\n\n\nmtcars |&gt; \n  ggplot(aes(x=mpg, y=wt, color=hp, shape=as.factor(gear), size=disp)) +\n  geom_point() +\n  guides(\n    color = guide_colorbar(position = \"top\",\n                           theme = theme(legend.title.position = \"top\",\n                                         legend.title = element_text(hjust = .5, size=15))),\n    \n    shape = guide_legend(theme = theme(legend.text.position = \"left\")),\n    \n    size = guide_legend(theme = theme(legend.text.position = \"top\"))\n  ) + \n  labs(color= \"Centered and enlarged legend title\")\n\n\n\n\n\n\n\n\n\n\nBackground colors and borders for the components of legends can be set with element_rect() (see element_rect). The theme options also contain many options for spacing and margins, where spacings can be set with unit() and margins with margin()\nFor a full list of modifiable elements see theme reference.\n\nmtcars |&gt; \n  ggplot(aes(x=mpg, y=wt, color=hp, shape=as.factor(gear), size=disp)) +\n  geom_point() +\n  guides(\n    size = guide_legend(theme = theme(legend.background = element_rect(fill=\"orange\", color=\"aquamarine\"))),\n    \n    shape = guide_legend(theme = theme(legend.key = element_rect(fill = \"purple\"),\n                                       legend.key.spacing.y = unit(1, \"mm\"))),\n    \n    color = guide_colorbar(position = \"top\", \n                           theme = theme(legend.frame = element_rect(color = \"red\")))\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nElements\nThe elements element_line(), element_rect(), element_text() and element_blank() are used in many of the attributes of the theme to set visuals of non-data components. Below are the attributes of each element type and some simple examples. For further information see Reference.\n\nLineRectangleTextBlank\n\n\nelement_line() is used to specify lines and has the following arguments:\n\ncolor/colour: Color of the line\nlinewidth: Line width in mm\nlinetype: Type pf line (e.g. solid, dashed, etc.). Integer in \\([0,8]\\), a string (\"blank\", \"solid\", \"dashed\", \"dotted\", \"dotdash\", \"longdash\", \"twodash\") or a custom sequence of hexadecimal numbers defined through a string, e.g. \"3121\" (see reference for more information)\nlineend: Line end type. One of \"butt\", \"round\" or \"square\"\narrow: An arrow from grid::arrow() (see documentation for more information)\n\nIn this example geom_segment() is used to show the different options, however, in theme settings the lines are set with attribute = element_line(options)\n\ndf &lt;- tibble(x=0, xend=10, y=5:1)\noptions &lt;- list(linewidth = 2, color = \"blue\", linetype = 2, lineend = \"round\", arrow=arrow())\ndescr &lt;- c(\"Line width = 2\", 'color = \"blue\"', \"linetype = 2 (dashed)\", \"lineend = round\", \"arrow = arrow()\")\n\n\np &lt;- ggplot(mapping = aes(linewidth=4, x=x, xend=xend, y=y, yend=y))\n\nfor (i in 1:5){\n  p &lt;- p + do.call({function(...) geom_segment(data = df[i,], ...)}, options[i])\n  p &lt;- p + annotate(\"text\", x=5, y=6.2-i, label=descr[i])\n}\n\np + ylim(0, 6) + xlim(-1, 11) + guides(linewidth=\"none\") + theme_element_example()\n\n\n\n\n\n\n\n\n\n\nThe rectangle element element_rect() is a rather simple element with the following arguments:\n\nfill: Color to fill rectangle with.\ncolor/colour: Color of the border.\nlinewidth: Width of the border line in mm.\nlinetype: line type of the border.\n\n\n(ggplot() + \n   theme(panel.background = \n           element_rect(fill = \"orange\",\n                        color= \"cyan\",\n                        linewidth=3,\n                        linetype=\"dashed\")) +\n   ggtitle(\"Square with dashed line\")) +\n\n(ggplot() + \n   theme(panel.background = \n           element_rect(fill = alpha(\"red\", 0.4),\n                        linewidth=NULL)) +\n   ggtitle(\"No line and alpha = 0.4\"))\n\n\n\n\n\n\n\n\n\n\nelement_text() is used to specify the theme of the text and has the following arguments:\n\nfamily: Font family, e.g (\"Times new roman\", \"Calibri\")\nface: \"plain\", \"bold\", \"italic\", or \"bold.italic\".\ncolor/colour: Color of the text.\nsize: Size of text in pts.\nhjust: Horizontal justification of text. One of \"left\", \"center\", \"right\" or \\(\\in [0, 1]\\) (left = 0, center = 0.5, right = 1, etc.).\nvjust: Vertical justification of text. One of \"top\", \"center\", \"bottom\" or \\(\\in [0, 1]\\) (bottom = 0, center = 0.5, top = 1, etc.)\nangle: Angle of text in degrees.\nlineheight: Height between rows in multi-line text.\nmargin: Margin around text. Defined with margin(t, r, b, l, unit=\"pt\") (letters stand for top, right, bottom and left margins).\n\nExamples are shown with annotate() where the attributes can be set directly, however, in theme settings they are set with attribute = element_text(options).\n\nlibrary(extrafont) \n\n# Warning! Ugly code.\np1 &lt;- ggplot() + theme_element_example() +\n  ggtitle(\"hjust/vjust\")  +\n  xlim(0,5) + ylim(0,5) +\n  geom_vline(xintercept = 2.5, alpha=0.3) + \n  geom_hline(yintercept = 1, alpha=0.3) + \n  annotate(\"text\", x = 2.5, y=4.5, label='hjust = \"right\"', size = 6, hjust=\"right\") +\n  annotate(\"text\", x = 2.5, y=3.5, label='hjust = \"center\"', size = 6, hjust=\"center\") +\n  annotate(\"text\", x = 2.5, y=2.5, label='hjust = \"left\"', size = 6, hjust=\"left\") +\n  annotate(\"text\", x = 0.7, y=1, label='vjust = \"bottom\"', size = 4.5, vjust=\"bottom\") +\n  annotate(\"text\", x = 2.5, y=1, label='vjust = \"center\"', size = 4.5, vjust=\"center\") +\n  annotate(\"text\", x = 4.3, y=1, label='vjust = \"top\"', size = 4.5, vjust=\"top\") \n\np2 &lt;- ggplot() + theme_element_example() +\n  ggtitle(\"Other\") +\n  xlim(0,5) + ylim(0,5) +\n  annotate(\"text\", x=1, y=4, size=6, label=\"Line height is\\n equal to 1\", lineheight=1) +\n  annotate(\"text\", x=1, y=1.5, size=6, label=\"Line height is\\n equal to 2\", lineheight=2) +\n  annotate(\"text\", x=3.8, y=4.5, size=6, label=\"Times New Roman\", family=\"Times New Roman\") + \n  annotate(\"text\", x=4, y=3.5, size=6, label=\"Blue text\", color = \"blue\") +\n  annotate(\"text\", x=4, y=2.5, size=6, label=\"Bold text\", fontface = \"bold\") +\n  annotate(\"text\", x=4, y=1, size=6, label=\"Rotated text\", angle=30)\n\n# Combine plots\np1 + p2\n\n\n\n\n\n\n\n\n\n\nelement_blank() is used to exclude attributes of being displayed. In the below example the axis text and grid lines are removed, however, most attributes can be removed.\n\nggplot(iris, aes(Petal.Length, Petal.Width, color=Species)) +\n  geom_point() +\n  theme(axis.text = element_blank(), panel.grid = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnits and margins\nMany theme components can be set with the unit() and margin() functions.\nunit(l, unit) is set with a length and a unit and represents the length in that unit. Supported units are e.g. \"mm\", \"cm\", \"points\", \"inches\" etc. See reference for more information.\nmargin(t, r, b, l, unit) is used to set margin theme options. It is set with a distance for each direction and a unit (which defaults to \"pt\"). The letters represent the following – t: top, r: right, b: bottom, l: left. Margin options can also be set by unit() if the same margins in all directions is desired.\nBelow are some examples of how units and margins can be used with legend components.\n\nmtcars |&gt; \n  ggplot(aes(x=mpg, y=wt, color=hp, shape=as.factor(gear), size=disp)) +\n  geom_point() +\n  guides(\n    size = guide_legend(theme = theme()),\n    \n    shape = guide_legend(theme = theme(legend.key.height = unit(0.4, \"inch\"), # height of legend key\n                                       legend.key.width = unit(0.4, \"inch\"), # width of legend key\n                                       legend.key.spacing.y = unit(1, \"mm\"))),\n    \n    color = guide_colorbar(position = \"top\", \n                           theme = theme(legend.key.width = unit(10, \"cm\"))) # length of color\n    ) + \n  theme(legend.box.background = element_rect(fill=\"gray\"),\n              legend.box.margin = margin(1, 2, 4, 8, \"mm\")) # legend bounding box margin"
  }
]